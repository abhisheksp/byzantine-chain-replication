import pickle
import nacl

from message import Message


class Replica(process):
    def setup(client_processes, replica_id, config):
        self.running_state = config['initial_running_state']
        signing_key = config['replica_sks'][self.replica_id]
        self.verifying_key = config['replica_vks'][self.replica_id]  # TODO: required?
        self.client_pks = config['client_vks']
        self.factory = Message(self.replica_id)
        self.sign = lambda x: signing_key.sign(x)
        self.replica_processes = None
        self.is_head = self.replica_id == 1  # TODO: extract constant
        self.is_tail = self.replica_id == config['replica_count']  # TODO: use linked list?

    def run():
        output('Started Replica {}'.format(self.replica_id))
        await(some(received(('new_configuration', _,))))
        await(False)

    def receive(msg=('new_configuration', payload)):
        output('Replica {} received other replica details'.format(self.replica_id))
        self.replica_processes = payload

    def receive(msg=('request', payload)):
        if self.is_head:
            is_verified, client_id, request_id, payload = verify_client(payload)
            if is_verified:
                output('Replica {} : Received Client Request, Payload: {}'.format(self.replica_id,
                                                                                  payload))

                operation = payload
                order_statement = self.factory.new_order_statement(payload)
                slot = order_statement['slot']
                order_proof = self.factory.new_order_proof(client_id, request_id, slot, operation, 'c', order_statement,
                                                           [])
                operation_response = apply_operation(operation)
                response_message = bytes(operation_response, 'utf-8')
                serialized_order_proof = pickle.dumps(order_proof)
                request_shuttle = self.factory.new_request_shuttle(self.sign(serialized_order_proof))
                forward_request(request_shuttle)
                respond_to_client(client_id, response_message)
                output_running_state()

    def forward_request(request_shuttle):
        if self.replica_id + 1 <= len(self.replica_processes):
            output('Replica {} : forwarding request to Replica: {}'.format(self.replica_id, self.replica_id + 1))
            send(request_shuttle, to=self.replica_processes[self.replica_id + 1])

    def apply_operation(payload):
        operation = payload['operation']
        if operation == 'put':
            return self.running_state.put(payload['key'], payload['val'])
        elif operation == 'get':
            return self.running_state.get(payload['key'])
        elif operation == 'append':
            return self.running_state.append(payload['key'], payload['val'])
        elif operation == 'slice':
            return self.running_state.slice(payload['key'], payload['slice'])
            # TODO: handle unrecognized operation?

    def respond_to_client(client_id, response_message):
        response = self.factory.new_response(self.sign(response_message))
        client_process = self.client_processes[client_id]
        send(response, to=client_process)
        output("Replica {} : Responded to client with : {}".format(self.replica_id, response_message))

    def verify_client(payload):
        client_id, request_id, signed_payload = payload['id'], payload['request_id'], payload['payload']
        try:
            if client_id in self.client_pks:
                raw_message = self.client_pks[client_id].verify(signed_payload)
                unsigned_payload = pickle.loads(raw_message)
                return True, client_id, request_id, unsigned_payload  # TODO: fix naming inconsistency
            return False, None
        except nacl.exceptions.BadSignatureError:
            return False, None

    def output_running_state():
        output('Replica {} : Running State: {}'.format(self.replica_id, self.running_state))
