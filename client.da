import pickle
import nacl
import operation
from message import Message


class Client(process):
    def setup(config):
        self.head = None
        self.olympus = None
        self.client_id = config['client_id']
        signing_key = config['client_sks'][self.client_id]
        self.sign = lambda x: signing_key.sign(x)
        self.verifying_key = config['client_vks'][self.client_id]
        self.olympus_vk = config['olympus_verifying_key']
        self.replica_vks = config['replica_vks']
        self.factory = Message(self.client_id)
        self.request_timeout = (config['client_timeout'] / 1000)
        self.pending_requests = set()
        output('Client setup finished...')

    def run():
        output('Client is up...')
        output('awaiting new configuration from Olympus')
        await(some(received(('new_configuration', _,))))
        demo_requests()
        await(False)

    def receive(msg=('new_configuration', payload)):
        output('received new configuration from Olympus')
        self.olympus, self.head = payload['olympus'], payload['head']

    def receive(msg=('response', payload)):
        output('received response from replica')
        is_verified, payload = verify_replica(payload)
        if is_verified:
            output("Received Replica Response, Payload:", payload)
            result = payload['result']
            result_proof = payload['result_proof']
            request_id = result_proof['request_id']
            self.pending_requests.remove(request_id)

    def send_request(operation):
        payload = serialize_and_sign(operation)
        request = self.factory.new_request(payload)
        request_id = request[1]['request_id']
        self.pending_requests.add(request_id)
        send(request, to=self.head)
        if await(request_id not in self.pending_requests):
            pass
        elif timeout(self.request_timeout):
            output('TimedOut, Issue Retransmission')
            retransmit_request(request_id, operation)

    def retransmit_request(old_request_id, operation):
        output('Client: Retransmitting old request: ', old_request_id)
        payload = serialize_and_sign(operation)
        request = self.factory.new_retransmission_request(old_request_id, payload)
        send(request, to=self.head)
        if await(old_request_id not in self.pending_requests):
            pass
        elif timeout(self.request_timeout):
            output('Retransmission Timed Out')

    def serialize_and_sign(payload):
        serialized_payload = pickle.dumps(payload)
        return self.sign(serialized_payload)

    def verify_replica(payload):
        replica_id, signed_payload = payload['replica_id'], payload['payload']
        try:
            if replica_id in self.replica_vks:
                serialized_payload = self.replica_vks[replica_id].verify(signed_payload)
                deserialized_payload = pickle.loads(serialized_payload)
                return True, deserialized_payload
            return False, None
        except nacl.exceptions.BadSignatureError:
            return False, None

    def demo_requests():
        output('Starting Put Demo')
        put_operation = operation.new_put_operation('the first key', 'the first value')
        send_request(put_operation)

        # output('Starting Get Demo')
        # get_operation = pickle.dumps(operation.new_get_operation('the first key'))
        # request = self.factory.new_request(self.sign(get_operation))
        # send(request, to=self.head)
        #
        # output('Starting Append Demo')
        # append_operation = pickle.dumps(operation.new_append_operation('the first key', '!!'))
        # request = self.factory.new_request(self.sign(append_operation))
        # send(request, to=self.head)
        #
        # output('Starting Slice Demo')
        # slice_operation = pickle.dumps(operation.new_slice_operation('the first key', '0:14'))
        # request = self.factory.new_request(self.sign(slice_operation))
        # send(request, to=self.head)
