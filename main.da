import state
import nacl.encoding
import nacl.signing

client = import_da('client')
olympus = import_da('olympus')


def olympus_key():
    signing_key = nacl.signing.SigningKey.generate()
    verify_key = signing_key.verify_key
    return signing_key, verify_key


def generate_keys(count):
    signing_keys = {}
    verifying_keys = {}
    for id_ in range(1, count + 1):
        signing_keys[id_] = nacl.signing.SigningKey.generate()
        verifying_keys[id_] = signing_keys[id_].verify_key
    return signing_keys, verifying_keys


def read_configuration(filepath):
    config = {}
    with open(filepath, 'r') as f:
        for line in f:
            if line[0] != '#':
                (key, sep, val) = line.partition('=')
                # if the line does not contain '=', it is invalid and hence ignored
                if len(sep) != 0:
                    val = val.strip()
                    config[key.strip()] = int(val) if str.isdecimal(val) else val
    return config


def main():
    config(channel='reliable')
    # config and keys setup

    # Read Configuration
    configuration = read_configuration('config.txt')
    client_count = configuration['num_client']

    configuration['initial_running_state'] = state.State({'key': 'value'})

    # Setup Keys
    client_sks, client_vks = generate_keys(client_count)
    configuration['client_sks'] = client_sks
    configuration['client_vks'] = client_vks
    configuration['replica_count'] = 2 * configuration['t'] + 1
    replica_sks, replica_vks = generate_keys(configuration['replica_count'])
    configuration['replica_sks'] = replica_sks
    configuration['replica_vks'] = replica_vks
    olympus_singing_key, olympus_verifying_key = olympus_key()
    configuration['olympus_singing_key'] = olympus_singing_key
    configuration['olympus_verifying_key'] = olympus_verifying_key

    # Setup Processes

    # Setup Clients
    client_processes = {}
    for client_id in range(1, client_count + 1):
        # TODO: isolate client configuration
        client_process = new(client.Client, args=(client_id, configuration))
        client_processes[client_id] = client_process

    # Setup Olympus
    olympus_process = new(olympus.Olympus, args=(client_processes, configuration))

    # Start Processes
    start(set(client_processes.values()))
    start(olympus_process)
