import state
import nacl.encoding
import nacl.signing

client = import_da('client')
olympus = import_da('olympus')


def main():
    # config and keys setup
    config = read_configuration('config.txt')
    config['initial_running_state'] = state.State({'key': 'value'})
    client_sks, client_vks = client_keys()
    config['client_sks'] = client_sks
    config['client_vks'] = client_vks
    config['replica_count'] = 2 * config['t'] + 1
    replica_sks, replica_vks = replica_keys(config['replica_count'])
    config['replica_sks'] = replica_sks
    config['replica_vks'] = replica_vks
    olympus_singing_key, olympus_verifying_key = olympus_key()
    config['olympus_singing_key'] = olympus_singing_key
    config['olympus_verifying_key'] = olympus_verifying_key
    # TODO: extend to multiple clients
    config['client_id'] = 1

    #process setup
    client_process = new(client.Client, args=(config,))
    client_processes = {1: client_process}
    olympus_process = new(olympus.Olympus, args=(client_processes, config,))
    start(client_process)
    start(olympus_process)


def olympus_key():
    signing_key = nacl.signing.SigningKey.generate()
    verify_key = signing_key.verify_key
    return signing_key, verify_key


def client_keys():
    # TODO: extend to multiple clients
    signing_key = nacl.signing.SigningKey.generate()
    verify_key = signing_key.verify_key
    signing_keys = {1: signing_key}
    verifying_keys = {1: verify_key}
    return signing_keys, verifying_keys


def replica_keys(replica_count):
    # TODO: extend to multiple replicas
    signing_keys = {}
    verifying_keys = {}
    for replica_id in range(1, replica_count+1):
        signing_keys[replica_id] = nacl.signing.SigningKey.generate()
        verifying_keys[replica_id] = signing_keys[replica_id].verify_key
    return signing_keys, verifying_keys


def read_configuration(filepath):
    config = {}
    with open(filepath, 'r') as f:
        for line in f:
            if line[0] != '#':
                (key, sep, val) = line.partition('=')
                # if the line does not contain '=', it is invalid and hence ignored
                if len(sep) != 0:
                    val = val.strip()
                    config[key.strip()] = int(val) if str.isdecimal(val) else val
    return config
