import collections
import pickle

import nacl
import nacl.encoding
import nacl.exceptions
import nacl.hash
import operation as op
import testutil
from message import Message
from state import State


class Client(process):
    def setup(client_id, signature, config):
        self.head = None
        self.olympus = None
        self.replica_processes = None
        self.replica_processes_set = None
        signing_key = config['client_sks'][client_id]
        self.sign = lambda x: signing_key.sign(x)
        self.factory = Message(client_id)
        self.request_timeout = (config['client_timeout'] / 1000)
        self.pending_requests = set()
        self.majority_replica_count = None
        self.current_configuration = None
        self.request_count = 0
        self.is_reconfiguring = False

    def run():
        custom_log('INFO: Client is up and running')
        custom_log('INFO: Initial State: (Pending_Requests: {})'.format(self.pending_requests))
        custom_log('INFO: Awaiting new configuration from Olympus')
        await(some(received(('configuration_response', _,))))
        demo()
        await(False)

    def receive(msg=('configuration_response', payload)):
        custom_log('INFO: Received configuration Response, Payload: {}'.format(payload))
        self.is_reconfiguring = payload['is_reconfiguring']
        received_configuration = payload['configuration']
        if self.is_reconfiguring:
            custom_log('INFO: Received latest configuration from Olympus')
            custom_log('INFO: Olympus is in the middle of a Reconfiguration')
            custom_log('INFO: Configuration received is old configuration...client must retry later')
        elif self.current_configuration is None or self.current_configuration < received_configuration:
            custom_log('INFO: Current Configuration Outdated')
            custom_log('INFO: Received latest Configuration from Olympus')
            self.olympus = payload['olympus']
            self.replica_processes = payload['replicas']
            self.replica_processes_set = set(self.replica_processes.values())
            self.head = self.replica_processes[1]
            self.majority_replica_count = payload['majority_count']
            self.current_configuration = payload['configuration']
            custom_log('INFO: Storing Olympus and Replicas processes')
            custom_log('INFO: Initialized Majority Replica Count: {}'.format(self.majority_replica_count))
        else:
            custom_log('INFO: Current Configuration already up to date')

    def receive(msg=('response', payload)):
        replica_id, signed_payload = payload['replica_id'], payload['payload']
        is_verified, payload = self.signature.verify_replica(replica_id, signed_payload)
        if is_verified:
            custom_log('INFO: Received Response from Replica: {}, Payload: {}'.format(replica_id, payload))
            result_proof = payload['result_proof']
            request_id = result_proof['request_id']
            if request_id in self.pending_requests:
                is_verified = handle_response(payload)
                if is_verified:
                    custom_log('INFO: Response Accepted, Request ID: {}'.format(request_id))
                    custom_log('INFO: Removing Request from Pending Requests, Request ID: {}'.format(request_id))
                    self.pending_requests.remove(request_id)
                else:
                    log_msg = 'INFO: Response Rejected, Result Proof Verification Failed, Request ID: {}'
                    custom_log(log_msg.format(request_id))
            else:
                log_msg = 'INFO: Dropping Duplicate Response from Replica: {}, Payload: {}'
                custom_log(log_msg.format(replica_id, payload))

    def receive(msg=('error', payload)):
        replica_id, signed_payload = payload['replica_id'], payload['payload']
        is_verified, payload = self.signature.verify_replica(replica_id, signed_payload)
        if is_verified:
            custom_log('INFO: Error Response from Replica: {}, Payload: {}'.format(replica_id, payload))
            handle_error_response(payload)

    def handle_response(payload):
        result, result_proof = payload['result'], payload['result_proof']
        return verify_result_proof(result, result_proof)

    def handle_error_response(payload):
        custom_log('INFO: Request New Configuration from Olympus')

    def receive(msg=('result_from_olympus', payload)):
        request_id = payload['request_id']
        result = payload['result']
        if request_id in self.pending_requests:
            custom_log('INFO: (Olympus Response) Response Accepted, Request ID: {}'.format(request_id))
            custom_log('INFO: (Olympus Response) Result: {}'.format(result))
            custom_log('INFO: Removing Request from Pending Requests, Request ID: {}'.format(request_id))
            self.pending_requests.remove(request_id)
        else:
            custom_log('INFO: (Olympus Response) Dropping Duplicate Response')

    def send_request(operation, receiver):
        custom_log('INFO: Checking for any pending requests and if a reconfiguration is in progress ...')
        custom_log('INFO: Current Request in Queue: {}'.format(operation))
        if await(len(self.pending_requests) == 0 and not self.is_reconfiguring):
            serialized_payload = serialize_and_sign(operation)
            request = self.factory.new_request(serialized_payload)
            request_id = request[1]['request_id']
            self.request_count += 1
            self.pending_requests.add(request_id)
            send_configuration_request()
            send(request, to=receiver)
            log_msg = 'INFO: Sending Request, RequestID: {}, Receiver: {}, Operation: {}'
            custom_log(log_msg.format(request_id, receiver, operation))
            while True:
                if await(request_id not in self.pending_requests):
                    break
                elif timeout(self.request_timeout):
                    custom_log('INFO: Request Timed Out')
                    retransmit_request(request_id, operation)
            custom_log('INFO: Request Completed, Request: {}'.format(request_id))

    def send_configuration_request(with_check=True):
        custom_log('send config req: {}'.format(with_check))
        if not with_check or self.request_count % 10 == 0:
            custom_log('INFO: Sending New Configuration Request')
            empty_payload = serialize_and_sign({})
            request = self.factory.new_configuration_request(empty_payload)
            send(request, to=self.olympus)

    def retransmit_request(old_request_id, operation):
        self.request_count += 1
        payload = serialize_and_sign(operation)
        request = self.factory.new_retransmission_request(old_request_id, payload)
        send_configuration_request(False)
        custom_log('INFO: Checking if Reconfiguration in progress before retransmission')
        if not self.is_reconfiguring:
            custom_log('INFO: Retransmitting Old Request, RequestID: {} '.format(old_request_id))
            send(request, to=self.replica_processes_set)
            if await(old_request_id not in self.pending_requests):
                pass
            elif timeout(self.request_timeout):
                custom_log('INFO: Retransmission Timed Out, Request ID: {}'.format(old_request_id))
            return

    def serialize_and_sign(payload):
        serialized_payload = pickle.dumps(payload)
        return self.sign(serialized_payload)

    def verify_result_proof(result, result_proof):
        custom_log('INFO: Verifying Result and Result Proof ...')

        def verify_result_statements_sign(signed_result_statements):
            result_statements = []
            for i, signed_result_statement in enumerate(signed_result_statements):
                replica_id = i + 1
                is_verified, result_statement = self.signature.verify_replica(replica_id, signed_result_statement)
                if not is_verified:
                    custom_log('INFO: Signature Verification failed')
                    return False, None
                result_statements.append(result_statement)
            custom_log('INFO: Result Signature Verification Successful!')
            custom_log('INFO: Verified Result: {}'.format(result_statements))
            return True, result_statements

        def find_majority(result_hashes):
            counter = collections.Counter(result_hashes)
            majority_hash = None
            found_majority_count = 0
            for h, count in counter.items():
                if count > found_majority_count:
                    found_majority_count = count
                    majority_hash = h
            return majority_hash, found_majority_count

        result_hash = nacl.hash.sha256(bytes(result, 'utf-8'), encoder=nacl.encoding.HexEncoder)
        is_verified, result_statements = verify_result_statements_sign(result_proof['result_statements'])
        if not is_verified:
            return False
        result_hashes = list(map(lambda r: r['result'], result_statements))
        majority_hash, found_majority_count = find_majority(result_hashes)
        required_majority_count = self.majority_replica_count
        is_required_majority = found_majority_count >= required_majority_count
        return is_required_majority and result_hash == majority_hash

    # FOR DEMO PURPOSES
    def demo():
        verification_running_state = State()

        def regular_client_workflow():
            client_workloads = config['client_workload'][self.client_id]
            custom_log(
                'INFO: Client Workload Operations: {}, Count: {}'.format(client_workloads, len(client_workloads)))
            for operation in client_workloads:
                op.apply_operation(verification_running_state, operation)
                send_request(operation, self.head)
            outfile = 'client_state_{}.json'.format(self.client_id)
            testutil.persist_state(verification_running_state.value, outfile)

        def demo_forward_requests():
            custom_log('INFO: Demoing Forwarding Request: Sending New Request to Nonhead Replica')
            operation = op.new_put_operation('movie', 'inception')
            op.apply_operation(verification_running_state, operation)
            non_head_replica = self.replica_processes[2]
            payload = serialize_and_sign(operation)
            dummy_request_id = 98374982
            request = self.factory.new_retransmission_request(dummy_request_id, payload)
            custom_log('INFO: Sending Single Retransmission Request to Replica 2')
            send(request, to=non_head_replica)

        custom_log('INFO: Starting DEMO')
        test_case = self.config.get('test_case', 0)
        custom_log('INFO: Executing Test Case: {}'.format(test_case))
        if test_case == 3:
            demo_forward_requests()
        else:
            regular_client_workflow()

        # TODO: automatically run consistency check

    def custom_log(log_message):
        output('Client: {} {}'.format(self.client_id, log_message))
