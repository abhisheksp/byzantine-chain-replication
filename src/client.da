import collections
import pickle

import nacl
import nacl.encoding
import nacl.exceptions
import nacl.hash
import operation as op
import testutil
from message import Message
from state import State


class Client(process):
    def setup(client_id, signature, config):
        self.head = None
        self.olympus = None
        self.replica_processes = None
        self.replica_processes_set = None
        signing_key = config['client_sks'][client_id]
        self.sign = lambda x: signing_key.sign(x)
        self.factory = Message(client_id)
        self.request_timeout = (config['client_timeout'] / 1000)
        self.pending_requests = set()
        self.majority_replica_count = None

    def run():
        custom_log('INFO: Client is up and running')
        custom_log('INFO: Initial State: (Pending_Requests: {})'.format(self.pending_requests))
        custom_log('INFO: Awaiting new configuration from Olympus')
        await(some(received(('new_configuration', _,))))
        demo()
        await(False)

    def receive(msg=('new_configuration', payload)):
        custom_log('INFO: Received New Configuration from Olympus')
        self.olympus = payload['olympus']
        self.replica_processes = payload['replicas']
        self.replica_processes_set = set(self.replica_processes.values())
        self.head = self.replica_processes[1]
        replica_count = len(self.replica_processes_set)
        self.majority_replica_count = (replica_count // 2) + 1
        custom_log('INFO: Storing Olympus and Replicas processes')
        custom_log('INFO: Initialized Majority Replica Count: {}'.format(self.majority_replica_count))

    def receive(msg=('response', payload)):
        replica_id, signed_payload = payload['replica_id'], payload['payload']
        is_verified, payload = self.signature.verify_replica(replica_id, signed_payload)
        if is_verified:
            custom_log('INFO: Received Response from Replica: {}, Payload: {}'.format(replica_id, payload))
            result_proof = payload['result_proof']
            request_id = result_proof['request_id']
            if request_id in self.pending_requests:
                handle_response(payload)
                self.pending_requests.remove(request_id)
            else:
                custom_log(
                    'INFO: Dropping Duplicate Response from Replica: {}, Payload: {}'.format(replica_id, payload))

    def receive(msg=('error', payload)):
        replica_id, signed_payload = payload['replica_id'], payload['payload']
        is_verified, payload = self.signature.verify_replica(replica_id, signed_payload)
        if is_verified:
            custom_log('INFO: Error Response from Replica: {}, Payload: {}'.format(replica_id, payload))
            handle_error_response(payload)

    def handle_response(payload):
        result, result_proof = payload['result'], payload['result_proof']
        is_verified = verify_result_proof(result, result_proof)
        if is_verified:
            custom_log('INFO: Response Accepted, Request ID: {}'.format(result_proof['request_id']))
        else:
            custom_log('INFO: Response Rejected, Result Proof Verification Failed')

    def handle_error_response(payload):
        custom_log('INFO: Request New Configuration from Olympus')

    def send_request(operation, receiver):
        serialized_payload = serialize_and_sign(operation)
        request = self.factory.new_request(serialized_payload)
        request_id = request[1]['request_id']
        self.pending_requests.add(request_id)
        send(request, to=receiver)
        custom_log(
            'INFO: Sending Request, RequestID: {}, Receiver: {}, Operation: {}'.format(request_id, receiver, operation))
        if await(request_id not in self.pending_requests):
            pass
        elif timeout(self.request_timeout):
            custom_log('INFO: Request Timed Out')
            retransmit_request(request_id, operation)

    def retransmit_request(old_request_id, operation):
        custom_log('Retransmitting Old Request, RequestID: {} '.format(old_request_id))
        payload = serialize_and_sign(operation)
        request = self.factory.new_retransmission_request(old_request_id, payload)
        send(request, to=self.replica_processes_set)
        if await(old_request_id not in self.pending_requests):
            pass
        elif timeout(self.request_timeout):
            custom_log('Retransmission Timed Out, Request ID: {}'.format(old_request_id))

    def serialize_and_sign(payload):
        serialized_payload = pickle.dumps(payload)
        return self.sign(serialized_payload)

    def verify_result_proof(result, result_proof):
        def verify_result_statements_sign(signed_result_statements):
            result_statements = []
            for i, signed_result_statement in enumerate(signed_result_statements):
                replica_id = i + 1
                is_verified, result_statement = self.signature.verify_replica(replica_id, signed_result_statement)
                if not is_verified:
                    return False, None
                result_statements.append(result_statement)
            return True, result_statements

        def find_majority(result_hashes):
            counter = collections.Counter(result_hashes)
            majority_hash = None
            found_majority_count = 0
            for h, count in counter.items():
                if count > found_majority_count:
                    found_majority_count = count
                    majority_hash = h
            return majority_hash, found_majority_count

        result_hash = nacl.hash.sha256(bytes(result, 'utf-8'), encoder=nacl.encoding.HexEncoder)
        is_verified, result_statements = verify_result_statements_sign(result_proof['result_statements'])
        if not is_verified:
            return False
        result_hashes = list(map(lambda r: r['result'], result_statements))
        majority_hash, found_majority_count = find_majority(result_hashes)
        required_majority_count = self.majority_replica_count
        is_required_majority = found_majority_count >= required_majority_count
        return is_required_majority and result_hash == majority_hash

    # FOR DEMO PURPOSES
    def demo():
        verification_running_state = State()

        def apply_operation(state, payload):
            operation = payload['operation']
            if operation == 'put':
                return state.put(payload['key'], payload['val'])
            elif operation == 'get':
                return state.get(payload['key'])
            elif operation == 'append':
                return state.append(payload['key'], payload['val'])
            elif operation == 'slice':
                return state.slice(payload['key'], payload['slice'])

        def regular_client_workflow():
            client_workloads = config['client_workload'][self.client_id]
            custom_log('INFO: Client Workload Operations: {}'.format(client_workloads))
            for operation in client_workloads:
                apply_operation(verification_running_state, operation)
                send_request(operation, self.head)
            outfile = 'client_state_{}.json'.format(self.client_id)
            testutil.persist_state(verification_running_state.value, outfile)

        def demo_forward_requests():
            custom_log('INFO: Demoing Forwarding Request: Sending New Request to Nonhead Replica')
            operation = op.new_put_operation('movie', 'inception')
            apply_operation(verification_running_state, operation)
            non_head_replica = self.replica_processes[2]
            send_request(operation, non_head_replica)
            outfile = 'client_state_{}.json'.format(self.client_id)
            testutil.persist_state(verification_running_state.value, outfile)

        def demo_error_response():
            dummy_request_id = 98374982
            operation = op.new_put_operation('dummy', 'dummy')
            retransmit_request(dummy_request_id, operation)


        custom_log('INFO: Starting DEMO')
        test_case = self.config['test_case']
        if test_case == 1:
            custom_log('INFO: Executing Test Case: 1')
            regular_client_workflow()
        if test_case == 2:
            custom_log('INFO: Executing Test Case: 2')
            regular_client_workflow()
        elif test_case == 3:
            custom_log('INFO: Executing Test Case: 3')
            demo_forward_requests()
        elif test_case == 4:
            custom_log('INFO: Executing Test Case: 4')
            demo_error_response()

    def custom_log(log_message):
        output('Client: {} {}'.format(self.client_id, log_message))
