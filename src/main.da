import getopt
import random
import string
import sys
import nacl.encoding
import nacl.signing
import os
import operation
import state
from signature import Signature

client = import_da('client')
olympus = import_da('olympus')


def olympus_key():
    signing_key = nacl.signing.SigningKey.generate()
    verify_key = signing_key.verify_key
    return signing_key, verify_key


def generate_keys(count):
    signing_keys = {}
    verifying_keys = {}
    for id_ in range(1, count + 1):
        signing_keys[id_] = nacl.signing.SigningKey.generate()
        verifying_keys[id_] = signing_keys[id_].verify_key
    return signing_keys, verifying_keys


def read_configuration(filepath):
    config = {}
    with open(filepath, 'r') as f:
        for line in f:
            if line[0] != '#':
                (key, sep, val) = line.partition('=')
                # if the line does not contain '=', it is invalid and hence ignored
                if len(sep) != 0:
                    val = val.strip()
                    config[key.strip()] = int(val) if str.isdecimal(val) else val
    return config


def parse_client_workloads(config):
    def parse_operation(raw_operation):
        if raw_operation.startswith('put'):
            key, value = map(lambda x: x.strip('\''), raw_operation[5:-1].split(','))
            return operation.new_put_operation(key, value)
        elif raw_operation.startswith('get'):
            key = raw_operation[5:-1].strip('\'')
            return operation.new_get_operation(key)
        elif raw_operation.startswith('append'):
            key, value = map(lambda x: x.strip('\''), raw_operation[7:-1].split(','))
            return operation.new_append_operation(key, value)
        elif raw_operation.startswith('slice'):
            key, value = map(lambda x: x.strip('\''), raw_operation[6:-1].split(','))
            return operation.new_slice_operation(key, value)

    def generate_operations(seed, count):
        random.seed(seed)
        operations = []
        previous_keys = []
        for _ in range(count):
            op = random.randint(1, 4)
            length = random.randint(0, 100)
            rand_key = ''.join(random.choices(string.ascii_letters + string.digits, k=length))
            rand_value = ''.join(random.choices(string.ascii_letters + string.digits, k=length))
            previous_keys.append(rand_key)
            rand_prev_key = random.choice(previous_keys)
            rand_slice = str(random.randint(0, 10)) + ':' + str(random.randint(0, 10))
            if op == 1:
                operations.append(operation.new_put_operation(rand_key, rand_value))
            elif op == 2:
                operations.append(operation.new_get_operation(rand_prev_key))
            elif op == 3:
                operations.append(operation.new_append_operation(rand_key, rand_value))
            else:
                operations.append(operation.new_slice_operation(rand_key, rand_slice))
        return operations

    client_workload = {}
    for k, v in config.items():
        if k.startswith('workload'):
            client_id = int(k[k.find('[') + 1]) + 1
            if not v.startswith('pseudorandom'):
                raw_operations = v.split('; ')
                workload = list(map(parse_operation, raw_operations))
            else:
                seed, n = map(int, v[v.find('(') + 1:-1].split(','))
                workload = generate_operations(seed, n)
            client_workload[client_id] = workload
    return client_workload


def main():
    # Read Configuration
    # TODO: redo this
    options, remainder = getopt.getopt(sys.argv[1:], 'c:')
    config_file = 'config.txt'
    for opt, arg in options:
        if opt == '-c':
            config_file = arg
    config_dir = 'config'
    parent_dir = os.path.abspath(os.pardir)
    full_config_path = os.path.join(parent_dir, config_dir, config_file)
    output('Using configuration file: {}'.format(full_config_path))
    configuration = read_configuration(full_config_path)
    client_count = configuration['num_client']

    configuration['initial_running_state'] = state.State()

    # Generate Workloads for clients
    configuration['client_workload'] = parse_client_workloads(configuration)

    configuration['replica_count'] = 2 * configuration['t'] + 1
    replica_count = configuration['replica_count']

    # Setup Keys
    signature = Signature()
    client_sks = signature.generate_client_keys(client_count)
    configuration['client_sks'] = client_sks
    replica_sks = signature.generate_replica_keys(replica_count)
    configuration['replica_sks'] = replica_sks
    olympus_sk = signature.generate_olympus_keys()
    configuration['olympus_singing_key'] = olympus_sk

    config(channel='reliable')

    # Setup Processes

    # Setup Clients
    client_processes = {}
    for client_id in range(1, client_count + 1):
        # TODO: isolate client configuration
        client_process = new(client.Client, args=(client_id, signature, configuration))
        client_processes[client_id] = client_process

    # Setup Olympus
    olympus_process = new(olympus.Olympus, args=(client_processes, signature, configuration))

    # Start Processes
    start(set(client_processes.values()))
    start(olympus_process)
