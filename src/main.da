import getopt
import os
import sys

import state
import testutil
import util
from signature import Signature

olympus = import_da('olympus')


def main():
    # Read Configuration
    options, remainder = getopt.getopt(sys.argv[1:], 'c:')
    config_file = 'config.txt'
    for opt, arg in options:
        if opt == '-c':
            config_file = arg
    config_dir = 'config'
    parent_dir = os.path.abspath(os.pardir)
    full_config_path = os.path.join(parent_dir, config_dir, config_file)
    output('INFO: Using configuration file: {}'.format(full_config_path))
    configuration = util.read_configuration(full_config_path)

    configuration['replica_count'] = 2 * configuration['t'] + 1
    configuration['initial_running_state'] = state.State()
    client_count = configuration['num_client']
    replica_count = configuration['replica_count']

    # Generate Workloads for clients
    configuration['client_workload'] = testutil.parse_client_workloads(configuration)
    configuration['failure_scenarios'] = testutil.parse_failure_scenarios(configuration)
    output('Failure Scenarios: ', configuration['failure_scenarios'])

    # Setup Keys
    signature = Signature()
    output('INFO: Generating keys for clients ...')
    client_sks = signature.generate_client_keys(client_count)
    configuration['client_sks'] = client_sks
    output('INFO: Generating keys for replica ...')
    replica_sks = signature.generate_replica_keys(replica_count)
    configuration['replica_sks'] = replica_sks
    output('INFO: Generating Olympus signing key ...')
    olympus_sk = signature.generate_olympus_keys()
    configuration['olympus_singing_key'] = olympus_sk

    output('INFO: Channel = Reliable and FIFO')
    config(channel={reliable, fifo})

    # Setup Olympus
    output('INFO: Setting Up Olympus ...')
    olympus_process = new(olympus.Olympus, args=(signature, configuration), at='OlympusNode')

    start(olympus_process)
