# -*- generated by 1.0.9 -*-
import da
_config_object = {}
import getopt
import os
import sys
import state
import testutil
import util
from signature import Signature
client = da.import_da('client')
olympus = da.import_da('olympus')

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])
    _config_object = {'channel': 'reliable'}

    def run(self):
        (options, remainder) = getopt.getopt(sys.argv[1:], 'c:')
        config_file = 'config.txt'
        for (opt, arg) in options:
            if (opt == '-c'):
                config_file = arg
        config_dir = 'config'
        parent_dir = os.path.abspath(os.pardir)
        full_config_path = os.path.join(parent_dir, config_dir, config_file)
        self.output('INFO: Using configuration file: {}'.format(full_config_path))
        configuration = util.read_configuration(full_config_path)
        configuration['replica_count'] = ((2 * configuration['t']) + 1)
        configuration['initial_running_state'] = state.State()
        client_count = configuration['num_client']
        replica_count = configuration['replica_count']
        configuration['client_workload'] = testutil.parse_client_workloads(configuration)
        signature = Signature()
        self.output('INFO: Generating keys for clients ...')
        client_sks = signature.generate_client_keys(client_count)
        configuration['client_sks'] = client_sks
        self.output('INFO: Generating keys for replica ...')
        replica_sks = signature.generate_replica_keys(replica_count)
        configuration['replica_sks'] = replica_sks
        self.output('INFO: Generating Olympus signing key ...')
        olympus_sk = signature.generate_olympus_keys()
        configuration['olympus_singing_key'] = olympus_sk
        self.output('INFO: Channel = Reliable')
        client_processes = {}
        for client_id in range(1, (client_count + 1)):
            client_process = self.new(client.Client, args=(client_id, signature, configuration), at='ClientNode')
            client_processes[client_id] = client_process.pop()
        self.output('Setting Up Olympus ...')
        olympus_process = self.new(olympus.Olympus, args=(client_processes, signature, configuration))
        client_processes_set = set(client_processes.values())
        self._start(client_processes_set)
        self._start(olympus_process)
