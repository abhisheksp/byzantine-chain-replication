# -*- generated by 1.0.9 -*-
import da
PatternExpr_274 = da.pat.TuplePattern([da.pat.ConstantPattern('reconfiguration_request'), da.pat.FreePattern('payload')])
_config_object = {}
replica = da.import_da('replica')

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_274, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_273])])

    def setup(self, client_processes, signature, config, **rest_290):
        super().setup(client_processes=client_processes, signature=signature, config=config, **rest_290)
        self._state.client_processes = client_processes
        self._state.signature = signature
        self._state.config = config
        self._state.signing_key = self._state.config['olympus_singing_key']
        self._state.replica_count = self._state.config['replica_count']
        self.custom_log('INFO: Olympus setup finished ...')

    def run(self):
        replica_processes = {}
        for replica_id in range(1, (self._state.replica_count + 1)):
            replica_process = self.new(replica.Replica, args=(self._state.client_processes, replica_id, self._state.signature, self._state.config))
            replica_processes[replica_id] = replica_process
            self._start(replica_process)
        client_processes_set = set(self._state.client_processes.values())
        replica_processes_set = set(replica_processes.values())
        payload = {'olympus': self._id, 'replicas': replica_processes}
        self.send(('new_configuration', payload), to=replica_processes_set)
        self.send(('new_configuration', payload), to=client_processes_set)
        super()._label('_st_label_269', block=False)
        _st_label_269 = 0
        while (_st_label_269 == 0):
            _st_label_269 += 1
            if False:
                _st_label_269 += 1
            else:
                super()._label('_st_label_269', block=True)
                _st_label_269 -= 1

    def custom_log(self, log_message):
        self.output('Olympus: {}'.format(log_message))

    def _Olympus_handler_273(self, payload):
        self.output('Reconfiguration Request Raised')
    _Olympus_handler_273._labels = None
    _Olympus_handler_273._notlabels = None
