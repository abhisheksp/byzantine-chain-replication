import pickle
import time

from dockerwrapper import DockerWrapper
from message import Message
from constants import REPLICA_PORT

replica = import_da('replica')
client = import_da('client')


class Olympus(process):
    def setup(signature, config):
        self.signing_key = config['olympus_singing_key']
        self.replica_count = config['replica_count']
        self.docker_wrapper = DockerWrapper()
        custom_log('INFO: Olympus setup finished ...')
        self.current_configuration = 0
        self.replica_processes = None
        self.client_processes = None
        self.factory = Message()

    def run():
        custom_log('INFO: Starting to run Olympus')
        client_processes = {}
        client_count = config['num_client']
        for client_id in range(1, client_count + 1):
            client_process = new(client.Client, args=(client_id, self.signature, self.config), at='ClientNode')
            client_processes[client_id] = client_process.pop()

        # Start Replica Node
        custom_log('INFO: Starting Replica Node')
        replica_node_id, error = self.docker_wrapper.start('replicanode_img', 'replicanode')
        if error:
            custom_log('ERR: {}'.format(error))

        # TODO: use exception pattern
        replica_node_ip, error = self.docker_wrapper.ip_address(replica_node_id)
        replica_address = 'ReplicaNode@{}:{}'.format(replica_node_ip, REPLICA_PORT)
        custom_log('INFO: Waiting for ReplicaNode Setup')
        time.sleep(10)
        custom_log('INFO: Replica Node Started at {}'.format(replica_address))
        if error:
            custom_log('ERR: Error retrieving Replica Node IP address')

        replica_processes = {}
        for replica_id in range(1, self.replica_count + 1):
            replica_process = new(replica.Replica, args=(client_processes, replica_id, self.signature, config),
                                  at=replica_address)
            replica_processes[replica_id] = replica_process.pop()
        self.replica_processes = replica_processes
        client_processes_set = set(client_processes.values())
        replica_processes_set = set(replica_processes.values())

        start(client_processes_set)
        start(replica_processes_set)

        payload = {
            'olympus': self,
            'replicas': replica_processes,
            'configuration': self.current_configuration,
            'majority_count': (self.replica_count // 2) + 1
        }
        send(('configuration_response', payload), to=replica_processes_set)
        send(('configuration_response', payload), to=client_processes_set)
        await(False)

    def receive(msg=('reconfiguration_request', payload)):
        output('Reconfiguration Request Raised')

    def receive(msg=('configuration_request', payload)):
        client_id, request_id, signed_payload = payload['client_id'], payload['request_id'], payload['payload']
        is_verified, operation = self.signature.verify_client(client_id, signed_payload)
        if is_verified:
            custom_log('INFO: Received Client {} Request, Payload: {}'.format(client_id, operation))
            custom_log('INFO: Client Signature Verification Successful!')
            # TODO: add configuration failure injection
            payload = {
                'olympus': self,
                'replicas': self.replica_processes,
                'configuration': self.current_configuration,
                'majority_count': (self.replica_count // 2) + 1
            }

            response = self.factory.new_configuration_response(payload)
            send(response, to=self.client_processes[client_id])
        else:
            custom_log('INFO: Not Verified Client {} Request'.format(client_id))

    def custom_log(log_message):
        output('Olympus: {}'.format(log_message))
