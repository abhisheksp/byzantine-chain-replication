import pickle
import time
from dockerwrapper import DockerWrapper
from message import Message
from constants import REPLICA_PORT

replica = import_da('replica')
client = import_da('client')


class Olympus(process):
    def setup(signature, config):
        self.signing_key = config['olympus_singing_key']
        self.replica_count = config['replica_count']
        self.docker_wrapper = DockerWrapper()
        self.replica_processes = {}
        custom_log('INFO: Olympus setup finished ...')
        self.current_configuration = 0
        self.replica_processes = None
        self.client_processes = None
        self.factory = Message()
        self.wedge_message_counter = {}
        self.total_wedge_messages = 0
        self.wedge_messages = {}
        self.is_reconfiguring = False
        self.sample_running_state = {}
        self.client_processes = {}

    def run():
        custom_log('INFO: Starting to run Olympus')
        client_count = config['num_client']
        for client_id in range(1, client_count + 1):
            client_process = new(client.Client, args=(client_id, self.signature, self.config), at='ClientNode')
            self.client_processes[client_id] = client_process.pop()

        # Start Replica Node
        custom_log('INFO: Starting Replica Node')
        replica_node_id, error = self.docker_wrapper.start('replicanode_img', 'replicanode')
        if error:
            custom_log('ERR: {}'.format(error))

        # TODO: use exception pattern
        replica_node_ip, error = self.docker_wrapper.ip_address(replica_node_id)
        replica_address = 'ReplicaNode@{}:{}'.format(replica_node_ip, REPLICA_PORT)
        custom_log('INFO: Waiting for ReplicaNode Setup')
        time.sleep(10)
        custom_log('INFO: Replica Node Started at {}'.format(replica_address))
        if error:
            custom_log('ERR: Error retrieving Replica Node IP address')

        for replica_id in range(1, self.replica_count + 1):
            replica_process = new(replica.Replica, args=(self.client_processes, replica_id, self.signature, self.config),
                                  at=replica_address)
            self.replica_processes[replica_id] = replica_process.pop()

        client_processes_set = set(self.client_processes.values())
        replica_processes_set = set(self.replica_processes.values())

        start(replica_processes_set)
        time.sleep(4)
        start(client_processes_set)

        payload = {
            'olympus': self,
            'replicas': replica_processes,
            'configuration': self.current_configuration,
            'majority_count': (self.replica_count // 2) + 1
        }
        send(('configuration_response', payload), to=replica_processes_set)
        send(('configuration_response', payload), to=client_processes_set)
        self.wedge_message_counter[self.current_configuration] = 0
        self.wedge_messages[self.current_configuration] = []

        while True:
            if await(self.wedge_message_counter[self.current_configuration] > ((self.replica_count - 1) // 2)):
                pass
            elif timeout(10):
                if self.is_reconfiguring:
                    custom_log('INFO: Wedge Statements Not Received - Olympus timed out')
                    custom_log('Sending wedge requests again')
                    wedge_request = {'key': 'I am the wedge request'}
                    send(('wedge_request', wedge_request), to=replica_processes_set)
                continue

            if await(False):
                custom_log('INFO: if Await')
            elif timeout(2):
                custom_log('INFO: elif Timeout')

            longest_history = find_longest_history()
            custom_log('INFO: LONGEST HISTORY: {}'.format(longest_history))

            reconfigure(replica_node_id)
            self.is_reconfiguring = False
        await(False)

    def receive(msg=('reconfiguration_request', payload)):
        custom_log('Reconfiguration Request Raised :{}'.format(payload))
        replica_processes_set = set(self.replica_processes.values())
        wedge_request = {'key': 'I am the wedge request'}
        if not is_reconfiguring and payload['replica_config'] == self.current_configuration:
            self.is_reconfiguring = True
            custom_log('INFO: Sending wedge requests to all replicas')
            send(('wedge_request', wedge_request), to=replica_processes_set)
        else:
            custom_log('INFO: Duplicate reconfiguration request received for the same configuration')
            custom_log('INFO: Wedge request already sent... waiting for wedge messages from replicas')

    def receive(msg=('wedge_message', payload)):
        replica_id = payload['replica_id']
        replica_config = payload['replica_config']
        checkpointed_slot = payload['checkpointed_slot']
        replica_history = payload['history']
        replica_running_state = payload['running_state']
        self.wedge_message_counter[replica_config] += 1
        self.total_wedge_messages += 1
        custom_log('INFO: Received Wedge Message (w) from replica {}'.format(replica_id))
        custom_log('INFO: w.checkpointed_slot: {}'.format(checkpointed_slot))
        custom_log('INFO: BTW config is {}'.format(replica_config))
        custom_log('INFO: w.running_state: {}'.format(replica_running_state))
        custom_log('INFO: w.history: {}'.format(replica_history))
        self.wedge_messages[replica_config].append(payload)
        self.sample_running_state = replica_running_state

    def reconfigure(replica_node_id):
        self.current_configuration += 1
        self.wedge_message_counter[self.current_configuration] = 0
        self.wedge_messages[self.current_configuration] = []
        custom_log('INFO: Reconfiguring ...')
        # custom_log('INFO: (Restart)Starting Replica Node')
        # replica_node_id, error = self.docker_wrapper.start('replicanode_img', 'replicanode1')
        # if error:
        #     custom_log('ERR: {}'.format(error))

        # replica_node_ip, error = self.docker_wrapper.ip_address(replica_node_id)
        # replica_address = 'ReplicaNode1@{}:{}'.format(replica_node_ip, REPLICA_PORT)
        # time.sleep(10)
        # custom_log('INFO:(Restart) Replica Node Started at {}'.format(replica_address))
        # if error:
        #     custom_log('ERR: (Restart)Error retrieving Replica Node IP address')

        # self.config['initial_running_state'] = self.sample_running_state
        # for replica_id in range(1, self.replica_count + 1):
        #     replica_process = new(replica.Replica, args=(self.client_processes, replica_id+self.replica_count, self.signature, self.config),
        #                               at=replica_address)
        #     self.replica_processes[replica_id] = replica_process.pop()
        #

        # client_processes_set = set(self.client_processes.values())
        # replica_processes_set = set(self.replica_processes.values())
        # start(replica_processes_set)
        # time.sleep(4)
        # payload = {
        #     'status' : "reconfigure",
        #     'olympus': self,
        #     'replicas': self.replica_processes,
        #     'configuration': self.current_configuration,
        #     'majority_count': (self.replica_count // 2) + 1
        # }
        # custom_log('INFO: Initializing replicas:')
        # custom_log('INFO: New configuration: {}'.format(self.current_configuration))
        # send(('configuration_response', payload), to=replica_processes_set)
        # send(('configuration_response', payload), to=client_processes_set)
        await(False)

    def find_longest_history():
        min_slot = 9999
        custom_log('INFO: (INSIDE) Number of wedge messages collected : {}'.format(
            len(self.wedge_messages[self.current_configuration])))
        for wedge_message in self.wedge_messages[self.current_configuration]:
            if wedge_message['checkpointed_slot'] < min_slot:
                min_slot = wedge_message['checkpointed_slot']
        lh_length = 0
        longest_history = []
        custom_log('INFO: LH Slot:{}'.format(min_slot))
        for wedge_message in self.wedge_messages[self.current_configuration]:
            if wedge_message['checkpointed_slot'] == min_slot:
                if len(wedge_message['history']) > lh_length:
                    lh_length = len(wedge_message['history'])
                    longest_history = wedge_message['history']
        return longest_history

    def receive(msg=('configuration_request', payload)):
        client_id, request_id, signed_payload = payload['client_id'], payload['request_id'], payload['payload']
        is_verified, operation = self.signature.verify_client(client_id, signed_payload)
        if is_verified:
            custom_log('INFO: Received Client {} Request, Payload: {}'.format(client_id, operation))
            custom_log('INFO: Client Signature Verification Successful!')
            # TODO: add configuration failure injection
            payload = {
                'olympus': self,
                'replicas': self.replica_processes,
                'configuration': self.current_configuration,
                'majority_count': (self.replica_count // 2) + 1
            }

            response = self.factory.new_configuration_response(payload)
            send(response, to=self.client_processes[client_id])
        else:
            custom_log('INFO: Not Verified Client {} Request'.format(client_id))

    def custom_log(log_message):
        output('Olympus: {}'.format(log_message))